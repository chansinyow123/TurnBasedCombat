/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package turnbasedcombat;

import java.awt.Color;
import java.awt.Dimension;
import javax.swing.JOptionPane;
import ADT.ArrayList;
import ADT.HashMap;
import entity.AudioPlayer;
import entity.Game;
import entity.Enemy;
import entity.Player;
import entity.Dialog;
/**
 *
 * @author chans
 */
public class JFrameRound3 extends javax.swing.JFrame {

    Game game;
    Enemy enemy;
    Player player;
    ArrayList<Dialog> dialogList = new ArrayList();
    HashMap<String, AudioPlayer> sound = new HashMap();
    int round;
    boolean reviveTime = true;

    /**
     * Creates new form JFrameRound1
     */
    public JFrameRound3() {
        initComponents();
        
        sound.put("Hit", new AudioPlayer("NormalHit.wav"));
        sound.put("Rest", new AudioPlayer("Rest.wav"));
        sound.put("Heal", new AudioPlayer("Heal.wav"));

        player = new Player(1200, 1200, 140, 170, 40, 40);
        enemy = new Enemy(2500, 2500, 180, 220, "The Dark Lord");
        game = Game.getFromFile();

        if (game == null) {
            JOptionPane.showMessageDialog(null, "Error Occured, Try again later");
            System.exit(0);
        }

        jLabelTitle.setText("Player vs " + enemy.getName());

        jLabelEnemyCurrentHP.setText(enemy.getCurrentHP() + "");
        jLabelEnemyMaxHP.setText(enemy.getMaxHP() + "");
        jLabelEnemyAtk.setText(enemy.getMinAtk() + " - " + enemy.getMaxAtk());

        jLabelPlayerCurrentHP.setText(player.getCurrentHP() + "");
        jLabelPlayerMaxHP.setText(player.getMaxHP() + "");
        jLabelPlayerAtk.setText(player.getMinAtk() + " - " + player.getMaxAtk());
        jLabelPlayerCurrentMP.setText(player.getCurrentMP() + "");
        jLabelPlayerMaxMP.setText(player.getMaxMP() + "");

        jLabelPlayerDialog.setText("> Final Fight...");
        jLabelEnemyDialog.setText("> " + enemy.getName() + " is prepared!");

        dialogList.add(new Dialog("Final Fight...", "Player"));
        dialogList.add(new Dialog(enemy.getName() + " is prepared!", enemy.getName()));

        jButtonContinue.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelPlayerDialog = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelEnemyCurrentHP = new javax.swing.JLabel();
        jLabelEnemyMaxHP = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanelEnemyHealthBar = new javax.swing.JPanel();
        jLabelEnemyAtk = new javax.swing.JLabel();
        jLabelEnemyDialog = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabelPlayerCurrentHP = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabelPlayerMaxHP = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabelPlayerAtk = new javax.swing.JLabel();
        jPanelPlayerHealthBar = new javax.swing.JPanel();
        jButtonAttack = new javax.swing.JButton();
        jButtonHeal = new javax.swing.JButton();
        jButtonRest = new javax.swing.JButton();
        jLabelTitle = new javax.swing.JLabel();
        jButtonContinue = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabelPlayerCurrentMP = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabelPlayerMaxMP = new javax.swing.JLabel();
        jButtonDialog = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Round 3");

        jLabelPlayerDialog.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelPlayerDialog.setText("> (Your Dialog)");
        jLabelPlayerDialog.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("HP:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("/");

        jLabelEnemyCurrentHP.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelEnemyCurrentHP.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelEnemyCurrentHP.setText("2500");

        jLabelEnemyMaxHP.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelEnemyMaxHP.setText("2500");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("ATK: ");

        jPanelEnemyHealthBar.setBackground(new java.awt.Color(0, 204, 51));
        jPanelEnemyHealthBar.setPreferredSize(new java.awt.Dimension(600, 20));

        javax.swing.GroupLayout jPanelEnemyHealthBarLayout = new javax.swing.GroupLayout(jPanelEnemyHealthBar);
        jPanelEnemyHealthBar.setLayout(jPanelEnemyHealthBarLayout);
        jPanelEnemyHealthBarLayout.setHorizontalGroup(
            jPanelEnemyHealthBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanelEnemyHealthBarLayout.setVerticalGroup(
            jPanelEnemyHealthBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jLabelEnemyAtk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelEnemyAtk.setText("180 - 220");

        jLabelEnemyDialog.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelEnemyDialog.setText("> (Enemy Dialog)");
        jLabelEnemyDialog.setToolTipText("");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("HP:");

        jLabelPlayerCurrentHP.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelPlayerCurrentHP.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPlayerCurrentHP.setText("1200");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("/");

        jLabelPlayerMaxHP.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelPlayerMaxHP.setText("1200");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel13.setText("ATK: ");

        jLabelPlayerAtk.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelPlayerAtk.setText("140 - 170");

        jPanelPlayerHealthBar.setBackground(new java.awt.Color(0, 204, 51));
        jPanelPlayerHealthBar.setPreferredSize(new java.awt.Dimension(600, 20));

        javax.swing.GroupLayout jPanelPlayerHealthBarLayout = new javax.swing.GroupLayout(jPanelPlayerHealthBar);
        jPanelPlayerHealthBar.setLayout(jPanelPlayerHealthBarLayout);
        jPanelPlayerHealthBarLayout.setHorizontalGroup(
            jPanelPlayerHealthBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanelPlayerHealthBarLayout.setVerticalGroup(
            jPanelPlayerHealthBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jButtonAttack.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButtonAttack.setText("Attack");
        jButtonAttack.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonAttack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAttackActionPerformed(evt);
            }
        });

        jButtonHeal.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButtonHeal.setText("Heal   (-20 MP, + 700 HP)");
        jButtonHeal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonHeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHealActionPerformed(evt);
            }
        });

        jButtonRest.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButtonRest.setText("Rest   (+30 MP)");
        jButtonRest.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonRest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRestActionPerformed(evt);
            }
        });

        jLabelTitle.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("Player VS The Dark Lord");

        jButtonContinue.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButtonContinue.setText("Continue");
        jButtonContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonContinueActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel16.setText("MP:");

        jLabelPlayerCurrentMP.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelPlayerCurrentMP.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPlayerCurrentMP.setText("40");

        jLabel18.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("/");

        jLabelPlayerMaxMP.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelPlayerMaxMP.setText("40");

        jButtonDialog.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButtonDialog.setText("Dialog");
        jButtonDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDialogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelPlayerDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelEnemyHealthBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(11, 11, 11)
                                .addComponent(jLabelEnemyCurrentHP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelEnemyMaxHP)
                                .addGap(41, 41, 41)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelEnemyAtk))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelEnemyDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelPlayerHealthBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelPlayerCurrentHP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelPlayerMaxHP)
                                .addGap(46, 46, 46)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelPlayerAtk)
                                .addGap(56, 56, 56)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelPlayerCurrentMP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelPlayerMaxMP))
                            .addComponent(jButtonAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButtonRest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonHeal, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
                                .addGap(83, 83, 83)
                                .addComponent(jButtonContinue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDialog))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelPlayerDialog)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabelEnemyCurrentHP)
                    .addComponent(jLabelEnemyMaxHP)
                    .addComponent(jLabel6)
                    .addComponent(jLabelEnemyAtk))
                .addGap(18, 18, 18)
                .addComponent(jPanelEnemyHealthBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabelEnemyDialog)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelPlayerCurrentMP)
                        .addComponent(jLabel18)
                        .addComponent(jLabelPlayerMaxMP))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(jLabelPlayerCurrentHP)
                        .addComponent(jLabel11)
                        .addComponent(jLabelPlayerMaxHP)
                        .addComponent(jLabel13)
                        .addComponent(jLabelPlayerAtk)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelPlayerHealthBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButtonAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonHeal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonContinue)
                    .addComponent(jButtonRest, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRestActionPerformed
        // TODO add your handling code here:
        sound.get("Rest").restart();
        sound.get("Rest").play();
        
        int restMP = 30;

        player.calculateMP(restMP);

        jLabelPlayerCurrentMP.setText(player.getCurrentMP() + "");
        jLabelPlayerDialog.setText("> You have RESTED for " + restMP + " MP!");

        dialogList.add(new Dialog("You have RESTED for " + restMP + " MP!", "Player"));

        enemyAttack();
        round++;
    }//GEN-LAST:event_jButtonRestActionPerformed

    private void jButtonHealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHealActionPerformed

        sound.get("Heal").restart();
        sound.get("Heal").play();
        
        int reduceMP = 20;
        int increaseHP = 700;

        if (player.getCurrentMP() < reduceMP) {
            JOptionPane.showMessageDialog(null, "Not enough Mana Power!");
        } else {
            player.calculateHP(increaseHP);
            player.calculateMP(-reduceMP);
            jLabelPlayerCurrentHP.setText(player.getCurrentHP() + "");
            jLabelPlayerCurrentMP.setText(player.getCurrentMP() + "");
            jLabelPlayerDialog.setText("> You have HEALED for " + increaseHP + " HP with 20 MP!");

            dialogList.add(new Dialog("You have HEALED for " + increaseHP + " HP with 20 MP!", "Player"));

            enemyAttack();
            round++;
        }

    }//GEN-LAST:event_jButtonHealActionPerformed

    private void jButtonContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonContinueActionPerformed
        
        sound.get("Rest").close();
        sound.get("Heal").close();
        sound.get("Hit").close();
        
        if (player.getCurrentHP() <= 0) {
            new JFrameGameOver().setVisible(true);
            this.dispose();
        } else {
            game.setRoundThree(round);

            Game.saveToFile(game);

            new JFrameStory4().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_jButtonContinueActionPerformed

    private void jButtonAttackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAttackActionPerformed

        sound.get("Hit").restart();
        sound.get("Hit").play();
        
        int playerDmg = player.getAttackDmg();
        playerAttack(playerDmg);
        jLabelPlayerDialog.setText("> You have HIT " + enemy.getName() + " with " + playerDmg + " damage!");

        dialogList.add(new Dialog("You have HIT " + enemy.getName() + " with " + playerDmg + " damage!", "Player"));

        if (enemy.getCurrentHP() <= 0) {
            playerWon();
        } else {
            enemyAttack();
        }

        round++;
    }//GEN-LAST:event_jButtonAttackActionPerformed

    private void jButtonDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDialogActionPerformed

        Dialog.saveToDialogFile(dialogList);

        new JFrameDialog().setVisible(true);
    }//GEN-LAST:event_jButtonDialogActionPerformed

    private void playerAttack(int playerDmg) {
        double percentage;
        int enemyHealthBar;
        double enemyReviveHealth;
        double increaseHealthPercentage = 50;

        enemy.calculateHP(-playerDmg);
        
        //jLabelEnemyCurrentHP.setText(enemy.getCurrentHP() + "");

        percentage = ((double) enemy.getCurrentHP() / (double) enemy.getMaxHP()) * 100.0;
        
        if (percentage <= 20 && reviveTime == true) {
            percentage += increaseHealthPercentage;
            enemyReviveHealth = (double) increaseHealthPercentage / 100.0 * (double) enemy.getMaxHP();
            
            enemy.calculateHP((int) Math.ceil(enemyReviveHealth));
            
            JOptionPane.showMessageDialog(null, "Enemy Has Heal for 50% HP!");
            
            reviveTime = false;
        }
        
        jLabelEnemyCurrentHP.setText(enemy.getCurrentHP() + "");
        enemyHealthBar = (int) Math.ceil(percentage * 600.0 / 100.0);

        jPanelEnemyHealthBar.setPreferredSize(new Dimension(enemyHealthBar, 20));

        if (percentage < 30) {
            jPanelEnemyHealthBar.setBackground(new Color(255, 0, 0));
        } else if (percentage >= 30 && percentage < 60) {
            jPanelEnemyHealthBar.setBackground(new Color(255, 153, 0));
        } else {
            jPanelEnemyHealthBar.setBackground(new Color(0, 204, 51));
        }
    }

    private void playerWon() {
        jButtonAttack.setVisible(false);
        jButtonHeal.setVisible(false);
        jButtonRest.setVisible(false);
        jButtonContinue.setVisible(true);

        jLabelEnemyDialog.setText("> " + enemy.getName() + " has been CONQUERED!");
        dialogList.add(new Dialog(enemy.getName() + " has been CONQUERED!", "System"));
    }

    private void enemyWon(int enemyDmg) {
        jButtonAttack.setVisible(false);
        jButtonHeal.setVisible(false);
        jButtonRest.setVisible(false);
        jButtonContinue.setVisible(true);

        if (enemyDmg > enemy.getMaxAtk()) {
            jLabelEnemyDialog.setText("> CRITICAL! " + enemy.getName() + " gives you a FINAL BLOW with " + enemyDmg + " damage, OOPS!");
            dialogList.add(new Dialog("CRITICAL! " + enemy.getName() + " gives you a FINAL BLOW with " + enemyDmg + " damage, OOPS!", enemy.getName()));
        } else {
            jLabelEnemyDialog.setText("> " + enemy.getName() + " gives you a FINAL BLOW with " + enemyDmg + " damage, OOPS!");
            dialogList.add(new Dialog(enemy.getName() + " gives you a FINAL BLOW with " + enemyDmg + " damage, OOPS!", enemy.getName()));
        }
    }

    private void enemyAttack() {

        int enemyDmg = enemy.getCriticalDmg(50, 50);
        double percentage;
        int playerHealthBar;

        player.calculateHP(-enemyDmg);
        jLabelPlayerCurrentHP.setText(player.getCurrentHP() + "");

        percentage = ((double) player.getCurrentHP() / (double) player.getMaxHP()) * 100.0;
        playerHealthBar = (int) Math.ceil(percentage * 600.0 / 100.0);

        jPanelPlayerHealthBar.setPreferredSize(new Dimension(playerHealthBar, 20));

        if (percentage < 30) {
            jPanelPlayerHealthBar.setBackground(new Color(255, 0, 0));
        } else if (percentage >= 30 && percentage < 60) {
            jPanelPlayerHealthBar.setBackground(new Color(255, 153, 0));
        } else {
            jPanelPlayerHealthBar.setBackground(new Color(0, 204, 51));
        }

        if (player.getCurrentHP() <= 0) {
            enemyWon(enemyDmg);
        } else {
            if (enemyDmg > enemy.getMaxAtk()) {
                jLabelEnemyDialog.setText("> CRITICAL! " + enemy.getName() + " has SWING you for " + enemyDmg + " damage!");
                dialogList.add(new Dialog("CRITICAL! " + enemy.getName() + " has SWING you for " + enemyDmg + " damage!", enemy.getName()));
            } else {
                jLabelEnemyDialog.setText("> " + enemy.getName() + " has HIT you for " + enemyDmg + " damage!");
                dialogList.add(new Dialog(enemy.getName() + " has HIT you for " + enemyDmg + " damage!", enemy.getName()));
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameRound3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameRound3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameRound3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameRound3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameRound3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAttack;
    private javax.swing.JButton jButtonContinue;
    private javax.swing.JButton jButtonDialog;
    private javax.swing.JButton jButtonHeal;
    private javax.swing.JButton jButtonRest;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelEnemyAtk;
    private javax.swing.JLabel jLabelEnemyCurrentHP;
    private javax.swing.JLabel jLabelEnemyDialog;
    private javax.swing.JLabel jLabelEnemyMaxHP;
    private javax.swing.JLabel jLabelPlayerAtk;
    private javax.swing.JLabel jLabelPlayerCurrentHP;
    private javax.swing.JLabel jLabelPlayerCurrentMP;
    private javax.swing.JLabel jLabelPlayerDialog;
    private javax.swing.JLabel jLabelPlayerMaxHP;
    private javax.swing.JLabel jLabelPlayerMaxMP;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelEnemyHealthBar;
    private javax.swing.JPanel jPanelPlayerHealthBar;
    // End of variables declaration//GEN-END:variables
}
